version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: taskflow-postgres
    environment:
      POSTGRES_DB: taskflow
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - taskflow-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: taskflow-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - taskflow-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # API Gateway
  api-gateway:
    build:
      context: ./backend/api-gateway
      dockerfile: Dockerfile
    container_name: taskflow-api-gateway
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - DATABASE_HOST=postgres
      - REDIS_HOST=redis
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - taskflow-network
    volumes:
      - ./backend/api-gateway:/app
      - /app/node_modules

  # Auth Service
  auth-service:
    build:
      context: ./backend/auth-service
      dockerfile: Dockerfile
    container_name: taskflow-auth-service
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - DATABASE_HOST=postgres
      - REDIS_HOST=redis
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - taskflow-network
    volumes:
      - ./backend/auth-service:/app
      - /app/node_modules

  # User Service
  user-service:
    build:
      context: ./backend/user-service
      dockerfile: Dockerfile
    container_name: taskflow-user-service
    ports:
      - "3002:3002"
    environment:
      - NODE_ENV=production
      - DATABASE_HOST=postgres
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - taskflow-network
    volumes:
      - ./backend/user-service:/app
      - /app/node_modules

  # Task Service
  task-service:
    build:
      context: ./backend/task-service
      dockerfile: Dockerfile
    container_name: taskflow-task-service
    ports:
      - "3003:3003"
    environment:
      - NODE_ENV=production
      - DATABASE_HOST=postgres
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - taskflow-network
    volumes:
      - ./backend/task-service:/app
      - /app/node_modules

  # Notification Service
  notification-service:
    build:
      context: ./backend/notification-service
      dockerfile: Dockerfile
    container_name: taskflow-notification-service
    ports:
      - "3004:3004"
    environment:
      - NODE_ENV=production
      - REDIS_HOST=redis
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - taskflow-network
    volumes:
      - ./backend/notification-service:/app
      - /app/node_modules

  # Frontend React App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: taskflow-frontend
    ports:
      - "3005:80"
    environment:
      - REACT_APP_API_URL=http://localhost:3000
    depends_on:
      - api-gateway
    networks:
      - taskflow-network

  # pgAdmin (Optional - for database management)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: taskflow-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@taskflow.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "5050:80"
    depends_on:
      - postgres
    networks:
      - taskflow-network

volumes:
  postgres_data:
  redis_data:

networks:
  taskflow-network:
    driver: bridge 